// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract ZorinNFTClub is ERC721Enumerable,Ownable
{

    string BaseURI ;
    uint256 public Listing_Price = 0.2 ether ;
    uint256 public TotalNFT = 30;
    uint256 public MintedNFT ;
    address public  owner ;
    address public  manikanta = 0x6633582BE61552de02103EECeDB806735fA021be;

    constructor(string memory _BaseURI) ERC721("ZORINNFT","ZFT")
    {
        BaseURI = _BaseURI ;
        owner = payable(msg.sender);
    }

     modifier OnlyOwner
    {
        require(owner == msg.sender ,"only owner can withdraw the balance from the contract");
        _;
    }
   
    function UpdateListingPrice(uint256 price) public OnlyOwner
    {
        Listing_Price = price ;
    }

    function _baseURI() internal view virtual override returns (string memory) {
            return BaseURI;
        }
    

     function MintNFT() public payable 
     { 
       require(MintedNFT < TotalNFT, "Exceed maximum LW3Punks supply");
       require(msg.value ==  Listing_Price, "Ether sent is not correct");
       MintedNFT+=1;
       _safeMint(msg.sender, MintedNFT);
     }
   
    function getbalance() public view returns(uint256)
    {
       return address(this).balance;
    }

    function withdraw() public OnlyOwner 
    {
        payable(msg.sender).transfer((address(this).balance * 95)/100) ;
        payable(manikanta).transfer((address(this).balance * 5)/100);
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
            require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

            string memory baseURI = _baseURI();
            // Here it checks if the length of the baseURI is greater than 0, if it is return the baseURI and attach
            // the tokenId and `.json` to it so that it knows the location of the metadata json file for a given 
            // tokenId stored on IPFS
            // If baseURI is empty return an empty string
            return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), ".json")) : "";
        }

   
   function ChangeOwner(address _owner) public OnlyOwner
   {
       transferOwnership(_owner);
   }
   
   
        receive() external payable 
     {

     }

     fallback() external payable 
     {

     }


   
}
